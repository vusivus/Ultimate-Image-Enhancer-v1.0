/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package classes.main;

import classes.adjustments.Adjustments;
import classes.adjustments.Effects;
import classes.adjustments.ImageFrame;
import classes.capture.Webcam;
import classes.io.ImageCodecs;
import classes.popup.Blurr;
import classes.popup.Brightness;
import classes.popup.Contrast;
import classes.popup.Resize;
import classes.popup.Sharpness;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.imgcodecs.Imgcodecs;

/**
 *
 * @author Electronics
 */
public class MainWindow extends javax.swing.JFrame {
String imageDir[]=new String[32];      //for storing the directory for each image
    Image image[]=new Image[32];           // for storing every processed image for display
    JLabel imageLabel;                     //for displaying image on JPanel
    Mat imageMat[]=new Mat[32];            // for storing every processed image
    Effects effect=new Effects();
    Adjustments adjust=new Adjustments();
    JFileChooser chooser;                   
                    //custom made internal frame for displaying image
    int redo;  
    ImageScroll imagePane;
    ImagePanel imagePanel;
    ImageCodecs codecs=new ImageCodecs();
    boolean firstRedo=false,hasImage=false,hasChooser=false;
    int value,width,height,index=0,previousIndex;
//==============================================================================
  static{
      System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
//==============================================================================
  }
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        addImageButton = new javax.swing.JButton();
        removeImageButton = new javax.swing.JButton();
        saveImageButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        webcamButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        contrastButton = new javax.swing.JButton();
        brightnessButton = new javax.swing.JButton();
        sharpenButton = new javax.swing.JButton();
        resizeButton = new javax.swing.JButton();
        horizontalFlipButton = new javax.swing.JButton();
        verticalFlipButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        blackwhiteButton = new javax.swing.JButton();
        blurrButton = new javax.swing.JButton();
        desktopPane = new javax.swing.JDesktopPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ultimate Image Enhancer V1.0 by GamerSoft");

        jTabbedPane1.setBackground(new java.awt.Color(51, 51, 51));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        addImageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/picture_add.png"))); // NOI18N
        addImageButton.setToolTipText("open image");
        addImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageButtonActionPerformed(evt);
            }
        });

        removeImageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/picture_remove.png"))); // NOI18N
        removeImageButton.setToolTipText("remove image");

        saveImageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/picture_save.png"))); // NOI18N
        saveImageButton.setToolTipText("save image");
        saveImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageButtonActionPerformed(evt);
            }
        });

        undoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/picture_back.png"))); // NOI18N
        undoButton.setToolTipText("undo");
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        redoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/picture_forward.png"))); // NOI18N
        redoButton.setToolTipText("redo");
        redoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoButtonActionPerformed(evt);
            }
        });

        webcamButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/webcam_64.png"))); // NOI18N
        webcamButton.setToolTipText("open webcam");
        webcamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webcamButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(addImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(undoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(webcamButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 345, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addImageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(removeImageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(saveImageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(undoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(redoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(webcamButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Image", jPanel1);

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        contrastButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/picture_contrast.png"))); // NOI18N
        contrastButton.setToolTipText("adjust contrast");
        contrastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrastButtonActionPerformed(evt);
            }
        });

        brightnessButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/picture_brightness.png"))); // NOI18N
        brightnessButton.setToolTipText("adjust brightness");
        brightnessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brightnessButtonActionPerformed(evt);
            }
        });

        sharpenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/picture_sharpen.png"))); // NOI18N
        sharpenButton.setToolTipText("sharpen");
        sharpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sharpenButtonActionPerformed(evt);
            }
        });

        resizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/picture_scale.png"))); // NOI18N
        resizeButton.setToolTipText("resize");
        resizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeButtonActionPerformed(evt);
            }
        });

        horizontalFlipButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/picture_horizontalFlip.png"))); // NOI18N
        horizontalFlipButton.setToolTipText("flip horizontal");
        horizontalFlipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalFlipButtonActionPerformed(evt);
            }
        });

        verticalFlipButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/picture_verticalFlip.png"))); // NOI18N
        verticalFlipButton.setToolTipText("flip vertical");
        verticalFlipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalFlipButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(contrastButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(brightnessButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sharpenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(horizontalFlipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verticalFlipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 337, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contrastButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(brightnessButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(sharpenButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(resizeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(horizontalFlipButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(verticalFlipButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Adjustments", jPanel2);

        jPanel3.setBackground(new java.awt.Color(204, 255, 255));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));

        blackwhiteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/picture_blackwhite.png"))); // NOI18N
        blackwhiteButton.setToolTipText("black and white");
        blackwhiteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackwhiteButtonActionPerformed(evt);
            }
        });

        blurrButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/button/picture_bllurr.png"))); // NOI18N
        blurrButton.setToolTipText("blurr");
        blurrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blurrButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(blackwhiteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blurrButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 642, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(blackwhiteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(blurrButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Effects", jPanel3);

        javax.swing.GroupLayout desktopPaneLayout = new javax.swing.GroupLayout(desktopPane);
        desktopPane.setLayout(desktopPaneLayout);
        desktopPaneLayout.setHorizontalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        desktopPaneLayout.setVerticalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(desktopPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(desktopPane)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addImageButtonActionPerformed
        //-- Get image from JFile chooser ---------------------------------------------
        if(hasChooser==false){            //check if JChooser object already created
            chooser=codecs.setUpFileChooser();
            hasChooser=true;
        }
        int returnFile=chooser.showOpenDialog(null);

        if(returnFile== JFileChooser.APPROVE_OPTION){
            if(hasImage){                 // If there's currently an image displaye
                desktopPane.removeAll();  // remove it
                this.getContentPane().revalidate();
                this.getContentPane().repaint();
                hasImage=false;
            }
            imageDir[index] = chooser.getSelectedFile().getAbsolutePath(); // store directory
            imageMat[index]=Imgcodecs.imread(imageDir[index]);
            //-- Create jInternal frame to store image -------------------------------------
            image[index]=codecs.matToImage(imageMat[index]); //create Image from Mat object
            ImageIcon icon=new ImageIcon(image[index]); // create icon from image
            width=imageMat[index].width();
            height=imageMat[index].height();
            imageLabel=new JLabel(icon);               //create a label for storing image icon
            if(width>640 ||height >480){
                imagePane=new ImageScroll();
                imagePane.setViewportView(imageLabel);
                imagePane.setScrollSize(width, height);
                imagePane.setVisible(true);
                desktopPane.add(imagePane);
            }
            else{
                imagePanel=new ImagePanel();
                imagePanel.setSize(width, height);
                imagePanel.add(imageLabel);
                imagePanel.setVisible(true);
                desktopPane.add(imagePanel);
            }
            this.getContentPane().revalidate();
            this.getContentPane().repaint();
            hasImage=true;
        }
    }//GEN-LAST:event_addImageButtonActionPerformed

    private void saveImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageButtonActionPerformed
        if(imageMat[index]!=null){
            //-- display a jSaveFile window
            int val=chooser.showSaveDialog(null);
            if(val==JFileChooser.APPROVE_OPTION){
                //-- the following code shows a save file dialogue and gets the save file -----
                //-- name and file type selected by the user then creates the final file name -
                String path=chooser.getSelectedFile().getAbsolutePath();  //gets directory plus file name
                String dir=codecs.removeExtention(path);                  //removes any filename extention if it exists
                String fileType=chooser.getFileFilter().getDescription(); //gets the description of the file type selected by user
                String ext=codecs.decodeExtention(fileType);              //gets extention from fileType
                dir+="."+ext;                                             //puts the correct extention to the file
                Imgcodecs.imwrite(dir, imageMat[index]);
            }
        }
    }//GEN-LAST:event_saveImageButtonActionPerformed

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        try{
            if(image[index-1]!=null){
                if(!firstRedo){
                    redo=index;
                    firstRedo=true;
                }
                --index;
                repaintImage();
            }
        }
        catch(ArrayIndexOutOfBoundsException ex){

        }
    }//GEN-LAST:event_undoButtonActionPerformed

    private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
        if(index<redo && firstRedo){
            ++index;
            repaintImage();
        }
    }//GEN-LAST:event_redoButtonActionPerformed

    private void webcamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webcamButtonActionPerformed
        Webcam cam=new Webcam();
         cam.setVisible(true);
    }//GEN-LAST:event_webcamButtonActionPerformed

    private void contrastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrastButtonActionPerformed
        Contrast bright=new Contrast(this,true);
        bright.setVisible(true);
        double value=bright.getContrast();
        value=(value/100)*5;
        if(bright.getReturnStatus()==1 && image!=null){
            ++index;
            checkIndex();
            checkIndex();
            imageMat[index]=adjust.changeBrightness(imageMat[previousIndex], value, 1);
            image[index]=codecs.matToImage(imageMat[index]); //create Image from Mat object
            repaintImage();
        }
    }//GEN-LAST:event_contrastButtonActionPerformed

    private void brightnessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brightnessButtonActionPerformed
        //--- create the brightness set window object ----------------------------------
        Brightness bright=new Brightness(this,true);
        bright.setVisible(true);
        value=bright.getBrightness(); //get value from user after window closed
        if(bright.getReturnStatus()==1 && image[index]!=null){
            previousIndex=index;
            ++index;
            checkIndex();
            //--- performs a brigtness adjustment onto the next image in the array ---------
            imageMat[index]=adjust.changeBrightness(imageMat[previousIndex], 1, value);
            image[index]=codecs.matToImage(imageMat[index]); //create Image from Mat object
            repaintImage();
        }   // TODO add your handling code here:
    }//GEN-LAST:event_brightnessButtonActionPerformed

    private void sharpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sharpenButtonActionPerformed
        Sharpness bright=new Sharpness(this,true);
        bright.setVisible(true);
        value=bright.getSharpness();
        if(bright.getReturnStatus()==1 && image!=null){
            ++index;
            checkIndex();
            checkIndex();
            imageMat[index]=adjust.changeSharpness(imageMat[previousIndex], value);
            image[index]=codecs.matToImage(imageMat[index]); //create Image from Mat object
            repaintImage();
        }
    }//GEN-LAST:event_sharpenButtonActionPerformed

    private void resizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeButtonActionPerformed
        Resize size=new Resize(this,true);
        size.setVisible(true);
        int p,w,h;//resize factors: by percentage or by width and height

        if(size.getReturnStatus()==1 && image[index]!=null){
            boolean status=size.getResizeStatus();// checks if resize if absolute value or by percentage
            if(status){   // if resize is by percentage
                p=size.getPercentage();
                float perc=(float)p/100f;
                w=(int) (width*perc);
                h=(int) (height*perc);
                previousIndex=index;
                ++index;
                checkIndex();
                imageMat[index]=adjust.changeSize(imageMat[previousIndex], w, h, 96);
            }
            else{
                w=size.getImageWidth();
                h=size.getImageHeight();
                previousIndex=index;
                ++index;
                checkIndex();
                imageMat[index]=adjust.changeSize(imageMat[previousIndex], w, h, 96);
            }
            width=w;
            height=h;
            image[index]=codecs.matToImage(imageMat[index]); //create Image from Mat object
            desktopPane.removeAll();
            if(width<640 && height<480){                
               imagePanel=new ImagePanel();
                imagePanel.setSize(width, height);              
                imagePanel.add(imageLabel);
                imagePanel.setVisible(true);
                desktopPane.add(imagePanel);
            }
            else{
                imagePane=new ImageScroll();
                imagePane.setViewportView(imageLabel);
                imagePane.setScrollSize(width, height);
                imagePane.setVisible(true);
                desktopPane.add(imagePane);
            }
            repaintImage();
        }
    }//GEN-LAST:event_resizeButtonActionPerformed

    private void blackwhiteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackwhiteButtonActionPerformed
        if(imageMat[index]!=null){  //check if there's an image
            //-- first save previous image for undo and redo operation ---------------------
            previousIndex=index;
            ++index;
            checkIndex();   // check if image array is exhausted
            //--- performs a grayscale transformation onto next image ----------------------
            imageMat[index]=effect.RGB2GrayScale(imageMat[previousIndex]);
            image[index]=codecs.matToImage(imageMat[index]); //create Image from Mat object
            repaintImage();
        }
    }//GEN-LAST:event_blackwhiteButtonActionPerformed

    private void blurrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blurrButtonActionPerformed
       Blurr blur= new Blurr(this,true);
        blur.setVisible(true);        
        if(blur.getReturnStatus()==1 && image!=null){
            value=blur.getBlurr();
            previousIndex=index;
            ++index;
            checkIndex();
            imageMat[index]=effect.gaussiabBlurr(imageMat[previousIndex], value);
           image[index]=codecs.matToImage(imageMat[index]); //create Image from Mat object
            repaintImage();
        }
    }//GEN-LAST:event_blurrButtonActionPerformed

    private void horizontalFlipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalFlipButtonActionPerformed
       if(image!=null){
            previousIndex=index;
            ++index;
            checkIndex();
          imageMat[index]=adjust.flipImage(imageMat[previousIndex],1);
          image[index]=codecs.matToImage(imageMat[index]); //create Image from Mat object
     repaintImage();
      }
    }//GEN-LAST:event_horizontalFlipButtonActionPerformed

    private void verticalFlipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalFlipButtonActionPerformed
        if(image!=null){
            previousIndex=index;
            ++index;
            checkIndex();
            imageMat[index]=adjust.flipImage(imageMat[previousIndex], 0);
            image[index]=codecs.matToImage(imageMat[index]); //create Image from Mat object
            repaintImage();
        }
    }//GEN-LAST:event_verticalFlipButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
  private void repaintImage(){
        imageLabel.setIcon(new ImageIcon(image[index]));
        width=image[index].getWidth(null);
        height=image[index].getHeight(null);
       this.revalidate();
       this.repaint();
    }
public void checkIndex(){
    if(index==10){
        index=0;
    }
}
//==============================================================================
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addImageButton;
    private javax.swing.JButton blackwhiteButton;
    private javax.swing.JButton blurrButton;
    private javax.swing.JButton brightnessButton;
    private javax.swing.JButton contrastButton;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JButton horizontalFlipButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton redoButton;
    private javax.swing.JButton removeImageButton;
    private javax.swing.JButton resizeButton;
    private javax.swing.JButton saveImageButton;
    private javax.swing.JButton sharpenButton;
    private javax.swing.JButton undoButton;
    private javax.swing.JButton verticalFlipButton;
    private javax.swing.JButton webcamButton;
    // End of variables declaration//GEN-END:variables
}
